class uart_rx_agent extends uvm_agent;

   uart_rx_monitor mon;
   uart_tx_sequencer  sqr;
   uart_tx_driver drv;
   virtual UART_IF  vif;
          
    uvm_active_passive_enum is_active = UVM_PASSIVE;

    `uvm_component_utils_begin (uart_rx_agent)   
          `uvm_field_object(mon, UVM_ALL_ON)
          `uvm_field_object(sqr, UVM_ALL_ON)
          `uvm_field_object(drv, UVM_ALL_ON)
   `uvm_component_utils_end
   
   function new(string name, uvm_component parent = null);
      super.new(name, parent);
   endfunction

   virtual function void build_phase(uvm_phase phase);
     
     if(is_active==UVM_ACTIVE) begin
      sqr = uart_tx_sequencer::type_id::create("sqr", this);
      drv = uart_tx_driver::type_id::create("drv", this);
     end
      mon = uart_rx_monitor::type_id::create("mon", this);
              
     if (!uvm_config_db#(virtual UART_IF)::get(this, "", "vif", vif)) begin
         `uvm_fatal("APB/AGT/NOVIF", "No virtual interface specified for this agent instance")
      end
     if (is_active==UVM_ACTIVE) begin
     uvm_config_db#(virtual UART_IF)::set( this, "sqr", "vif", vif);
     uvm_config_db#(virtual UART_IF)::set( this, "drv", "vif", vif);
       
     end
         
     uvm_config_db#(virtual UART_IF)::set( this, "mon", "vif", vif);
    
     
   endfunction: build_phase
          
   virtual function void connect_phase(uvm_phase phase);
     if (is_active==UVM_ACTIVE) begin
      drv.seq_item_port.connect(sqr.seq_item_export);
      end
    
     endfunction
endclass : uart_rx_agent